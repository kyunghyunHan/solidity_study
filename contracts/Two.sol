pragma solidity ^0.8.11;

import "./One.sol";  //다른파일에서 불러올 때
contract KittyInterface {
  //유전자"를 포함한 모든 키티 데이터를 반환하는 getKitty라는 함수
  function getKitty(uint256 _id) external view returns (
    bool isGestating,
    bool isReady,
    uint256 cooldownIndex,
    uint256 nextActionAt,
    uint256 siringWithId,
    uint256 birthTime,
    uint256 matronId,
    uint256 sireId,
    uint256 generation,
    uint256 genes
  );
}
contract ZombieFeeding is ZombieFactory { //상속
  address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;
   KittyInterface kittyContract = KittyInterface(ckAddress);

  function feedAndMultiply(uint _zombieId, uint _targetDna) public {
    require(msg.sender == zombieToOwner[_zombieId]);
    Zombie storage myZombie = zombies[_zombieId];// Storage는 블록체인 상에 영구적으로 저장되는 변수를 의미하지.
    _targetDna = _targetDna % dnaModulus;// Memory는 임시적으로 저장되는 변수로, 컨트랙트 함수에 대한 외부 호출들이 일어나는 사이에 지워지지.
    uint newDna = (myZombie.dna + _targetDna) / 2;
      if (keccak256(_species) == keccak256("kitty")) {//보너스: 키티 유전자_species와 "kitty" 스트링 각각의 keccak256 해시값을 비교
      newDna = newDna - newDna % 100 + 99;//if 문 내에서 DNA 마지막 2자리를 99로 대체
    }
    _createZombie("NoName", newDna);
  }
  function feedOnKitty(uint _zombieId, uint _kittyId) public { //다수의 반환값 처리
    uint kittyDna;
    (,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);
     feedAndMultiply(_zombieId, kittyDna, "kitty");//feedAndMultiply가 호출될 때, "kitty"를 마지막 인자값으로 전달
  }
}


// var abi = /* abi generated by the compiler */
// var ZombieFeedingContract = web3.eth.contract(abi)
// var contractAddress = /* our contract address on Ethereum after deploying */
// var ZombieFeeding = ZombieFeedingContract.at(contractAddress)

// // 우리 좀비의 ID와 타겟 고양이 ID를 가지고 있다고 가정하면 
// let zombieId = 1;
// let kittyId = 1;

// // 크립토키티의 이미지를 얻기 위해 웹 API에 쿼리를 할 필요가 있다. 
// // 이 정보는 블록체인이 아닌 크립토키티 웹 서버에 저장되어 있다.
// // 모든 것이 블록체인에 저장되어 있으면 서버가 다운되거나 크립토키티 API가 바뀌는 것이나 
// // 크립토키티 회사가 크립토좀비를 싫어해서 고양이 이미지를 로딩하는 걸 막는 등을 걱정할 필요가 없다 ;) 
// let apiUrl = "https://api.cryptokitties.co/kitties/" + kittyId
// $.get(apiUrl, function(data) {
//   let imgUrl = data.image_url
//   // 이미지를 제시하기 위해 무언가를 한다 
// })

// // 유저가 고양이를 클릭할 때:
// $(".kittyImage").click(function(e) {
//   // 우리 컨트랙트의 `feedOnKitty` 메소드를 호출한다 
//   ZombieFeeding.feedOnKitty(zombieId, kittyId)
// })

// // 우리의 컨트랙트에서 발생 가능한 NewZombie 이벤트에 귀를 기울여서 이벤트 발생 시 이벤트를 제시할 수 있도록 한다: 
// ZombieFactory.NewZombie(function(error, result) {
//   if (error) return
//   // 이 함수는 레슨 1에서와 같이 좀비를 제시한다: 
//   generateZombie(result.zombieId, result.name, result.dna)
// })